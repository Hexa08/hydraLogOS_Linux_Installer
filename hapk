#!/bin/bash
#
# Hydra Package Manager (hapk)
# Copyright (c) 2025-2045 Hydra Package System
# All rights reserved.
#
# This file is part of the Hydra Package System.
# See COPYRIGHT and LICENSE files for details.
#

# A dpkg-like package manager for .hapk packages

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if running on HydraLogOS
check_os() {
    if [ ! -f "/etc/hydralogos-release" ]; then
        echo -e "${RED}Error: This package manager only works on HydraLogOS${NC}"
        echo -e "${YELLOW}Please install HydraLogOS to use this package manager.${NC}"
        exit 1
    fi
}

# Convert .deb to .hapk
convert_deb_to_hapk() {
    local deb_file="$1"
    local hapk_file="${deb_file%.deb}.hapk"
    
    echo -e "${YELLOW}Converting $deb_file to $hapk_file...${NC}"
    
    # Create temporary directory
    local temp_dir=$(mktemp -d)
    
    # Extract .deb package
    dpkg-deb -x "$deb_file" "$temp_dir"
    
    # Create .hapk package
    cd "$temp_dir"
    tar -czf "../$hapk_file" *
    cd - > /dev/null
    
    # Clean up
    rm -rf "$temp_dir"
    
    echo -e "${GREEN}Conversion complete: $hapk_file${NC}"
    return "$hapk_file"
}

# Install to system path
install_to_system() {
    echo -e "${YELLOW}Installing Hydra Package Manager to system...${NC}"
    
    # Create symlinks in /usr/local/bin
    sudo ln -sf "$(pwd)/hapk" /usr/local/bin/hapk
    sudo ln -sf "$(pwd)/hapk-install" /usr/local/bin/hapk-install
    sudo ln -sf "$(pwd)/hapk-encrypt" /usr/local/bin/hapk-encrypt
    
    # Make scripts executable
    sudo chmod +x /usr/local/bin/hapk
    sudo chmod +x /usr/local/bin/hapk-install
    sudo chmod +x /usr/local/bin/hapk-encrypt
    
    echo -e "${GREEN}Installation complete! You can now use hapk commands from anywhere.${NC}"
}

# Check if running as root for install/remove operations
check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}Error: This operation requires root privileges${NC}"
        exit 1
    fi
}

# Initialize package database
init_db() {
    mkdir -p /var/lib/hapk
    touch /var/lib/hapk/installed
    touch /var/lib/hapk/status
}

# Get package info for neofetch
get_neofetch_info() {
    if [ -f "/var/lib/hapk/neofetch" ]; then
        cat /var/lib/hapk/neofetch
    else
        echo "No packages installed"
    fi
}

# List installed packages
list_installed() {
    echo -e "${BLUE}Installed packages:${NC}"
    while IFS= read -r line; do
        if [ ! -z "$line" ]; then
            echo "$line"
        fi
    done < /var/lib/hapk/installed
}

# Show package info
show_info() {
    local pkg="$1"
    if [ -z "$pkg" ]; then
        echo -e "${RED}Error: Package name required${NC}"
        exit 1
    fi

    if grep -q "^$pkg " /var/lib/hapk/installed; then
        echo -e "${BLUE}Package: $pkg${NC}"
        grep "^$pkg " /var/lib/hapk/installed
    else
        echo -e "${RED}Package not installed: $pkg${NC}"
        exit 1
    fi
}

# Check package extension
check_extension() {
    local pkg="$1"
    if [[ ! "$pkg" =~ \.(hapk|deb)$ ]]; then
        echo -e "${RED}Error: Package must have .hapk or .deb extension${NC}"
        exit 1
    fi
}

# Install package
install_package() {
    check_root
    check_os
    local pkg="$1"
    if [ -z "$pkg" ]; then
        echo -e "${RED}Error: Package file required${NC}"
        exit 1
    fi

    check_extension "$pkg"

    if [ ! -f "$pkg" ]; then
        echo -e "${RED}Error: Package file not found: $pkg${NC}"
        exit 1
    fi

    # If .deb file, convert to .hapk first
    if [[ "$pkg" =~ \.deb$ ]]; then
        pkg=$(convert_deb_to_hapk "$pkg")
    fi

    echo -e "${YELLOW}Installing $pkg...${NC}"
    hapk-install "$pkg"
    
    # Update package count
    update_neofetch_info
}

# Update neofetch package info
update_neofetch_info() {
    local pkg_count=$(wc -l < /var/lib/hapk/installed)
    echo "$pkg_count" > /var/lib/hapk/pkg_count
}

# Remove package
remove_package() {
    check_root
    check_os
    local pkg="$1"
    if [ -z "$pkg" ]; then
        echo -e "${RED}Error: Package name required${NC}"
        exit 1
    fi

    if ! grep -q "^$pkg " /var/lib/hapk/installed; then
        echo -e "${RED}Package not installed: $pkg${NC}"
        exit 1
    fi

    echo -e "${YELLOW}Removing $pkg...${NC}"
    
    # Run pre-remove script if exists
    if [ -f "/var/lib/hapk/scripts/$pkg/prerm.sh" ]; then
        bash "/var/lib/hapk/scripts/$pkg/prerm.sh"
    fi

    # Remove files
    if [ -d "/var/lib/hapk/data/$pkg" ]; then
        rm -rf "/var/lib/hapk/data/$pkg"
    fi

    # Remove from database
    sed -i "/^$pkg /d" /var/lib/hapk/installed
    sed -i "/^$pkg /d" /var/lib/hapk/status
    
    # Update package count
    update_neofetch_info

    echo -e "${GREEN}Package removed successfully${NC}"
}

# Show help
show_help() {
    echo -e "${BLUE}Hydra Package Manager (hapk)${NC}"
    echo "Usage: hapk [command] [options]"
    echo
    echo "Commands:"
    echo "  hapk-i <package.hapk|package.deb>    Install a package"
    echo "  hapk-rf <package>                    Remove a package"
    echo "  hapk-ls                              List installed packages"
    echo "  hapk-info <package>                  Show package information"
    echo "  hapk-help                            Show this help message"
}

# Main command processing
case "$1" in
    "hapk-i"|"-i")
        install_package "$2"
        ;;
    "hapk-rf"|"-rf")
        remove_package "$2"
        ;;
    "hapk-ls"|"-ls")
        list_installed
        ;;
    "hapk-info"|"-info")
        show_info "$2"
        ;;
    "hapk-i")
        install_to_system
        ;;
    "hapk-help"|"-h"|"help"|"")
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        show_help
        exit 1
        ;;
esac 
