#!/bin/bash
#
# Hydra Package Encryptor
# Copyright (c) 2025-2045 Hydra Package System
# All rights reserved.
#
# This file is part of the Hydra Package System.
# See COPYRIGHT and LICENSE files for details.
#

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if openssl is installed
if ! command -v openssl &> /dev/null; then
    echo -e "${RED}Error: openssl is required but not installed${NC}"
    exit 1
fi

# Function to generate a random key
generate_key() {
    openssl rand -hex 32
}

# Function to encrypt a file
encrypt_file() {
    local input_file="$1"
    local output_file="$2"
    local key="$3"
    
    # Create a temporary file for the key
    local key_file=$(mktemp)
    echo "$key" > "$key_file"
    
    # Encrypt the file
    openssl enc -aes-256-cbc -salt -in "$input_file" -out "$output_file" -pass file:"$key_file"
    
    # Remove the temporary key file
    rm "$key_file"
    
    # Generate SHA-256 hash of the encrypted file
    local hash=$(openssl dgst -sha256 "$output_file" | awk '{print $2}')
    
    # Save the hash
    echo "$hash" > "${output_file}.sha256"
    
    echo -e "${GREEN}File encrypted successfully${NC}"
    echo -e "${YELLOW}Key: $key${NC}"
    echo -e "${YELLOW}Hash: $hash${NC}"
}

# Function to decrypt a file
decrypt_file() {
    local input_file="$1"
    local output_file="$2"
    local key="$3"
    
    # Create a temporary file for the key
    local key_file=$(mktemp)
    echo "$key" > "$key_file"
    
    # Verify the hash
    local stored_hash=$(cat "${input_file}.sha256")
    local current_hash=$(openssl dgst -sha256 "$input_file" | awk '{print $2}')
    
    if [ "$stored_hash" != "$current_hash" ]; then
        echo -e "${RED}Error: File integrity check failed${NC}"
        rm "$key_file"
        exit 1
    fi
    
    # Decrypt the file
    openssl enc -aes-256-cbc -d -in "$input_file" -out "$output_file" -pass file:"$key_file"
    
    # Remove the temporary key file
    rm "$key_file"
    
    echo -e "${GREEN}File decrypted successfully${NC}"
}

# Main script
case "$1" in
    "encrypt")
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Input file required${NC}"
            exit 1
        fi
        
        if [ ! -f "$2" ]; then
            echo -e "${RED}Error: Input file not found${NC}"
            exit 1
        fi
        
        # Generate a random key
        key=$(generate_key)
        
        # Encrypt the file
        encrypt_file "$2" "${2}.enc" "$key"
        ;;
        
    "decrypt")
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo -e "${RED}Error: Input file and key required${NC}"
            exit 1
        fi
        
        if [ ! -f "$2" ]; then
            echo -e "${RED}Error: Input file not found${NC}"
            exit 1
        fi
        
        # Decrypt the file
        decrypt_file "$2" "${2%.enc}" "$3"
        ;;
        
    *)
        echo -e "${BLUE}Hydra Package Encryptor${NC}"
        echo "Usage:"
        echo "  $0 encrypt <file>           Encrypt a file"
        echo "  $0 decrypt <file> <key>    Decrypt a file"
        exit 1
        ;;
esac 